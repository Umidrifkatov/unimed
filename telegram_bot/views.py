from django.http import HttpResponse
from django.core.exceptions import PermissionDenied
from django.views.decorators.csrf import csrf_exempt
from django.conf import settings
import telebot
from .constants import BUTTONS, STEP
from core.models import *
from .services import *

bot = telebot.TeleBot(settings.TOKEN, threaded=True)


@csrf_exempt
def worker(request):
    if request.META['CONTENT_TYPE'] == 'application/json':
        json_data = request.body.decode('utf-8')
        update = telebot.types.Update.de_json(json_data)
        bot.process_new_updates([update])
        return HttpResponse("")
    else:
        raise PermissionDenied

    

@bot.message_handler(commands=['start',]) # excluded from main commands handler for 'start', additional parsing data that com with start
def send_welcome(message): # https://t.me/Unimed_test_bot?start=1
    mess = message.text.split()
    starter = None
    
    try:
        if len(mess) == 2 and mess[1]:
            try:
                starter = Starter.objects.get(key=mess[1])
            except Exception as e:
                pass           
         
        try:
            user = Tuser.objects.get(userid=message.from_user.id)
        except Exception as e:
            user = Tuser.objects.create(userid=message.from_user.id, step=STEP['waiting_phone_start'], from_starter=starter )
    except Exception as e:
        print(e)           
    user.step = STEP['waiting_phone_start']
    user.save()

    # second message with line and keybuttons
    text = '–ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–∞–ª–µ–µ'
    keyboard = telebot.types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
    connect = telebot.types.KeyboardButton(text='üì± –ü–µ—Ä–µ–∑–≤–æ–Ω–∏—Ç—å –º–Ω–µ', request_contact=True)
    keyboard.add(connect)
    bot.send_message(user.userid, text, reply_markup=keyboard)
    



@bot.message_handler(commands=['help', '–Ω–∞–∑–∞–¥',])
def message_start_sc(message):
    user = Tuser.objects.get(userid=message.from_user.id)
    user.step = STEP['p_category']
    user.save()
    # first message with pic and inline messages 
    pic = open('./static/img/tgmain.jpeg', 'rb')
    text = '–£—Å—Ç–∞–Ω–æ–≤–∫–∞ <b>–ø–æ–¥ –∫–ª—é—á —Å –≥–∞—Ä–∞–Ω—Ç–∏–µ–π</b>.  \n\n–ò–∑ –ï–≤—Ä–æ–ø—ã –∏ –°–®–ê –ø–æ <b>–Ω–∏–∑–∫–∏–º —Ü–µ–Ω–∞–º</b> '
    keyboard = telebot.types.InlineKeyboardMarkup(row_width=2)
    b1 = telebot.types.InlineKeyboardButton(text="–û—Ç–∫—Ä—ã—Ç—å —Å–∞–π—Ç", url="unimedtrade.uz")
    b2 = telebot.types.InlineKeyboardButton(text="–û –∫–æ–º–ø–∞–Ω–∏–∏", url="unimedtrade.uz")
    b3 = telebot.types.InlineKeyboardButton(text="–ü–æ–¥—Ä–æ–±–Ω–æ –æ —Ä–∞—Å—Å—Ä–æ—á–∫–µ", url="unimedtrade.uz")
    b4 = telebot.types.InlineKeyboardButton(text='üîé –ü–æ–∏—Å–∫', switch_inline_query_current_chat="–ú–†–¢")
    keyboard.add(b1,b2)
    keyboard.add(b3)
    keyboard.add(b4)
    bot.send_photo(user.userid, pic, text, reply_markup=keyboard, parse_mode='HTML')
    pic.close()
    # second message with line and keybuttons
    text = '–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é'
    keyboard = telebot.types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    buttons = [telebot.types.KeyboardButton(text=i.name) for i in ParentCategory.objects.all()]
    keyboard.add(*buttons)
    bot.send_message(user.userid, text, reply_markup=keyboard)


# –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –Ω–∞—Å
@bot.message_handler(commands=['about'])
def connection(message):
    user = Tuser.objects.get(userid=message.from_user.id)
    user.step = STEP['waiting_phone']
    user.save()
    bot.send_location(user.userid, settings.LOC, settings.LOC1)
    text = '<b>–ê–¥—Ä–µ—Å</b> - –≥.–¢–∞—à–∫–µ–Ω—Ç. 6-–ø—Ä–æ–µ–∑–¥ —É–ª.–•–∞–ª–∫–∞–±–æ–¥ 25A\n\n<b>–¢–µ–ª–µ—Ñ–æ–Ω</b> +998712004404 \n\n\n<b>–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "üì± –ü–µ—Ä–µ–∑–≤–æ–Ω–∏—Ç—å –º–Ω–µ" —á—Ç–æ–±—ã —Å –≤–∞–º–∏ —Å–≤—è–∑–∞–ª–∏—Å—å</b>'
    keyboard = telebot.types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    connect = telebot.types.KeyboardButton(text='üì± –ü–µ—Ä–µ–∑–≤–æ–Ω–∏—Ç—å –º–Ω–µ', request_contact=True)
    back = telebot.types.KeyboardButton(text='/–Ω–∞–∑–∞–¥')
    keyboard.add(connect)
    keyboard.add(back)
    bot.send_message(user.userid, text, reply_markup=keyboard, parse_mode="HTML")


# –í —Å–ª—É—á–∞–µ –≤—Å–µ—Ö –Ω–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π —Ç—Ä–µ—Ç–∏–º —à–∞–≥–æ–º
def unknown_message(message, bot, user):
    bot.send_message(message.from_user.id, '–ù–∞–∂–º–∏—Ç–µ /start')



# –í—Ç–æ—Ä—ã–º —à–∞–≥–æ–º –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –∏–º–µ–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–≤–ø–∞–¥–∞—é—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
def all_text_messages_switcher(message, bot, user):
    try:
        switcher = {
            STEP['p_category']: chosenpcategory, 
            STEP['medium_category']: chosenmcategory,
            STEP['product']: product,
            STEP['waiting_phone']: get_phone,
            STEP['manufacturer']: manufacturer,
            STEP['waiting_phone_start']: phonewaitingstart,

            
        }
        func = switcher.get(int(user.step), unknown_message)
        func(message, bot, user)
    except Exception as e:
        print(e)
        unknown_message(message, bot, user)




# –ü—Ä–∏–Ω–∏–º–∞–µ—Ç –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è // –ø–µ—Ä–≤—ã–º —à–∞–≥–æ–º –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –Ω–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –∫–Ω–æ–ø–∫–∞ –ª–∏
@bot.message_handler(content_types=['text', 'contact', 'location', 'photo'])
def buttons_answer(message):
    try:
        user = Tuser.objects.get(userid = message.from_user.id)
        switcher = {
            BUTTONS['menu']: main,
            BUTTONS['back']: back,      
                }
        func = switcher.get(message.text, all_text_messages_switcher)
        func(message, bot, user)
    except Exception as e:
        print(e)
        unknown_message(message, bot, user)


# –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –Ω–∞—Å 
@bot.callback_query_handler(func=lambda call: True)
def call_message(message):
    parts = message.data
    if parts == 'call':
        connection(message)












@bot.inline_handler(lambda query: len(query.query) > 0)
def query_text(query):
    if not Tuser.objects.filter(userid = query.from_user.id).exists():
        Tuser.objects.create(userid=query.from_user.id)
    kb = telebot.types.InlineKeyboardMarkup(row_width=2)
    first = telebot.types.InlineKeyboardButton(text="–°–∞–π—Ç", url="unimedtrade.uz")
    second = telebot.types.InlineKeyboardButton(text="–ë–û–¢", url="https://t.me/UnimedStoreBot")
    search = telebot.types.InlineKeyboardButton(text='üîé –ü–æ–∏—Å–∫', switch_inline_query_current_chat="–∫—Ç")
    search1 = telebot.types.InlineKeyboardButton(text='–ü–µ—Ä–µ–∑–≤–æ–Ω–∏—Ç—å üì≤', url="https://t.me/UnimedStoreBot")
    kb.add(first, second)
    kb.add(search, search1)

    products = Product.objects.filter(name_search__icontains=query.query.lower())
    
    results = []
    for prod in products:
        if len(results) < 20:

            msg = telebot.types.InlineQueryResultArticle(
                id=f"{prod.id}", title=f"{prod.manufacturer.name} {prod.name}",
                input_message_content=telebot.types.InputTextMessageContent(message_text=f'{prod.manufacturer.name} {prod.name}\n\n{prod.short_description}\n\n–û–ë–û–†–£–î–û–í–ê–ù–ò–ï –í –†–ê–°–°–†–û–ß–ö–£ + TRADE-IN. \nUNIMED TRADE - –ø–æ—Å—Ç–∞–≤—â–∏–∫ –Ω–æ–≤–æ–≥–æ –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–≥–æ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è –≤ –£–∑–±–µ–∫–∏—Å—Ç–∞–Ω–µ\n\n +998712004404\n@unimedstorebot'),
                reply_markup=kb,


            )

        
            results.append(msg)
    bot.answer_inline_query(query.id, results, cache_time=0)